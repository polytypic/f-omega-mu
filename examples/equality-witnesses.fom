# First-class type equality witnesses

type Leibniz = λα.λβ.∀φ.φ α → φ β
type Fold = λα.λβ.∀φ.(∀γ.φ γ γ) → φ α β

type Eq = λeq.{
  ofFold: ∀α.∀β.Fold α β → eq α β
  ofLeibniz: ∀α.∀β.Leibniz α β → eq α β
  refl: ∀α.eq α α
  symm: ∀α.∀β.eq α β → eq β α
  trans: ∀α.∀β.∀γ.eq β γ → eq α β → eq α γ
  to: ∀α.∀β.eq α β → α → β
  from: ∀α.∀β.eq α β → β → α
}

let Leibniz =
  let ofFold = Λα.Λβ.λab:Fold α β.Λφ.λh:φ α.ab[λα.λβ.φ α → φ β] (Λγ.λx:φ γ.x) h
  let ofLeibniz = Λα.Λb.λab:Leibniz α b.ab
  let refl = Λα.Λφ.λx:φ α.x
  let symm = Λα.Λβ.λab:Leibniz α β.Λφ.ab[λβ.φ β → φ α] (λx:φ α.x)
  let trans = Λα.Λβ.Λγ.λbc:Leibniz β γ.λab:Leibniz α β.Λφ.λx:φ α.bc[φ] (ab[φ] x)
  let to = Λα.Λβ.λab:Leibniz α β.ab[λx.x]
  let from = Λα.Λβ.λab:Leibniz α β.to[β][α] (symm[α][β] ab)
  《Leibniz\{ofFold, ofLeibniz, refl, symm, trans, to, from}》: ∃(Eq)

let Fold =
  let ofFold = Λα.Λβ.λab:Fold α β.ab
  let ofLeibniz = Λα.Λβ.λab:Leibniz α β.Λφ.λh:∀γ.φ γ γ.ab[φ α] (h[α])
  let refl = Λα.Λφ.λf:∀γ.φ γ γ.f[α]
  let symm = Λα.Λβ.λab:Fold α β.Λφ.λf:∀γ.φ γ γ.ab[λα.λβ.φ β α] f
  let trans = Λα.Λβ.Λγ.λbc:Fold β γ.λab:Fold α β.Λϕ.
    λf:∀γ.ϕ γ γ.bc[λγ.λδ.ϕ α γ → ϕ α δ] (Λγ.λx:ϕ α γ.x) (ab[ϕ] f)
  let to = Λα.Λβ.λab:Fold α β.ab[λα.λβ.α → β] (Λγ.λx:γ.x)
  let from = Λα.Λβ.λab:Fold α β.to[β][α] (symm[α][β] ab)
  《Fold\{ofFold, ofLeibniz, refl, symm, trans, to, from}》: ∃(Eq)

{Leibniz, Fold}
