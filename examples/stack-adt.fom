# Stack ADT using an existential type

include "lib/types"

type Stack = λstack.{
  empty: ∀α.stack α
  push: ∀α.α → stack α → stack α
  pop: ∀α.stack α → opt (α, stack α)
}

let «stack, Stack»: ∃(Stack) = «list, {
  empty = Λ_.'None
  push = Λ_.λx.λxs.'Some (x, xs)
  pop = Λ_.λxs.xs
}»

let a_stack =
  Stack.empty[int]
  ▷ Stack.push[int] 3
  ▷ Stack.push[int] 1
  ▷ Stack.push[int] 5

let μto_list: ∀α.stack α → list α = Λα.λs.
  Stack.pop[α] s ▷ case {
    None = λ().'None
    Some = λ(x, xs).'Some (x, to_list[α] xs)
  }

to_list[int] a_stack
