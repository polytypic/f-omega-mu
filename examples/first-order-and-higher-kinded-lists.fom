# Both first-order and higher-kinded recursive types are allowed

# This example shows that a polymorphic list type can be expressed both as the
# fixed point of a first-order `list_1` type and as the fixed point of a
# higher-order `list` type.  Furthermore, the types are considered equivalent.

type opt = λα.'None | 'Some α

type list   = μlist.λα.opt (α, list α)
type list_1 = λα.μlist_1.opt (α, list_1)

let of_list   = Λα.λx: list   α.x
let of_list_1 = Λα.λx: list_1 α.x

let check = Λα.λlist: list α.λlist_1: list_1 α.
  (of_list[α] list_1, of_list_1[α] list)

check
