# Heterogenous map using a universal embedding

include "lib/types"

let «univ, Univ» = import "lib/univ"

type HMap = λmap.λκ.{
  empty: map
  new_key: ∀ν.() → κ ν
  get: ∀ν.κ ν → map → opt ν
  add: ∀ν.κ ν → ν → map → map
}

let «map, «κ, HMap»»: ∃map.∃(HMap map) =
  type κ = λν.{to: ν → univ, of: univ → opt ν}
  type map = list univ
  let empty = 'None
  let new_key = Univ.new
  let μget: ∀ν.κ ν → map → opt ν = Λν.λk.case {
    None = λ().'None
    Some = λ(u, m).
      k.of u ▷ case {
        None = λ().get[ν] k m
        Some = λv.'Some v
      }
  }
  let add = Λν.λk: κ ν.λv: ν.λm: map.'Some (k.to v, m)
  «map, «κ, {empty, new_key, get, add}»»

let k1 = HMap.new_key[int] ()
let k2 = HMap.new_key[string] ()
let m =
  HMap.empty
  ▷ HMap.add[int] k1 101
  ▷ HMap.add[string] k2 "42"

(HMap.get[int] k1 m, HMap.get[string] k2 m)
