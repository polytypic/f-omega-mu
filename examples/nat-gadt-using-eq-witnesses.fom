# Natural number GADT encoding using type equality witnesses

let «eq, Eq» = import "lib/leibniz"

type μNat = λn.
  | 'Zero  (Zero n)
  | 'Succ ∃(Succ n)
and μZero = λn.    eq  'Z    n
and μSucc = λn.λm.(eq ('S m) n, Nat m)

let Zero = 'Zero Eq.refl['Z]
let Succ = Λm.λm:Nat m.'Succ «m, (Eq.refl['S m], m)»: ∃(Succ ('S m))

let from = λn:int.
  if n < 0 then
    'None
  else
    let μloop:∀n.Nat n → int → ∃(Nat) = Λn.λn:Nat n.λi:int.
      if i ≤ 0 then
        «n, n»: ∃(Nat)
      else
        loop['S n] (Succ[n] n) (i-1)
    'Some (loop['Z] Zero n)

let to = λ«n, n»: ∃(Nat).
  let μloop:∀n.Nat n → int → int = Λn.λn:Nat n.λi:int.
    n ▷ case {
      Zero = λ_:Zero n.i
      Succ = λ«m, (_, m)»: ∃(Succ n).loop[m] m (i+1)
    }
  loop[n] n 0

from 10 ▷ case {
  None = λ().0
  Some = to
}
