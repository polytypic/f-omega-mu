# Natural number GADT encoding using type equality witnesses

include "lib/types"

let «eq, Eq» = import "lib/eq"

type μNat = λn.
  | 'Zero  (Zero n)
  | 'Succ ∃(Succ n)
and μZero = λn.    eq 'Z    n
and μSucc = λn.λm.(eq 'S(m) n, Nat m)

let Zero: Nat 'Z = 'Zero Eq.refl«'Z»
let Succ: ∀n.Nat n → Nat 'S(n) = Λn.λn.'Succ «n, (Eq.refl«'S n», n)»

let from: int → opt ∃(Nat) = λn.
  if n < 0 then
    'None
  else
    let μloop: ∀n.Nat n → int → ∃(Nat) = Λn.λn.λi.
      if i ≤ 0 then
        «n, n»
      else
        loop (Succ n) (i-1)
    'Some (loop Zero n)

let to: ∃(Nat) → int = λ«n, n».
  let μloop: ∀n.Nat n → int → int = λn.λi.
    n ▷ case {
      Zero = λ_.i
      Succ = λ«n, (_, n)».loop n (i+1)
    }
  loop n 0

from 10 ▷ case {
  None = λ().0
  Some = to
}
