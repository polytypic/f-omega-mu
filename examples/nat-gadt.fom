# Natural number GADT using Scott encoding

include "lib/types"

type μNat = λn.∀r.Cases r → r n

and μCases = λr.{
  Zero:            r 'Z
  Succ: ∀n.Nat n → r 'S(n)
}

let {Zero, Succ}: Cases Nat = {
  Zero = λcs.cs.Zero
  Succ = Λn.λn.λcs.cs.Succ«n» n
}

let from: int → opt ∃(Nat) = λn.
  if n < 0 then
    'None
  else
    let μloop: ∀n.Nat n → int → ∃(Nat) = Λn.λn.λi.
      if i ≤ 0 then
        «n, n»
      else
        loop«'S n» (Succ«n» n) (i-1)
    'Some (loop«'Z» Zero n)

let to: ∃(Nat) → int = λ«n, n».
  let μloop: ∀n.Nat n → int → int = λn.λi.
    n«λ_.int» {
      Zero = i
      Succ = Λn.λn.loop«n» n (i + 1)
    }
  loop«n» n 0

from 10 ▷ case {
  None = λ().0
  Some = to
}
