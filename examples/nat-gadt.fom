# Natural number GADT using Scott encoding

type μNat = λn.∀r.Cases r → r n

and μCases = λr.{
  Zero:            r 'Z
  Succ: ∀n.Nat n → r 'S(n)
}

let Zero =              Λr.λcs: Cases r.cs.Zero
let Succ = Λn.λn: Nat n.Λr.λcs: Cases r.cs.Succ[n] n

let from = λn: int.
  if n < 0 then
    'None
  else
    let μloop: ∀n.Nat n → int → ∃(Nat) = Λn.λn: Nat n.λi: int.
      if i ≤ 0 then
        «n, n»: ∃(Nat)
      else
        loop['S n] (Succ[n] n) (i-1)
    'Some (loop['Z] Zero n)

let to = λ«n, n»: ∃(Nat).
  let μloop: ∀n.Nat n → int → int = Λn.λn: Nat n.λi: int.
    n[λ_.int] {
      Zero = i
      Succ = Λn.λn: Nat n.loop[n] n (i + 1)
    }
  loop[n] n 0

from 10 ▷ case {
  None = λ().0
  Some = to
}
