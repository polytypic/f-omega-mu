# Generic `fold`s

let type Functor = λφ:* → *.{map: ∀α.∀β.(α → β) → (φ α → φ β)} in

let μfold:∀φ:* → *.∀α.Functor φ → (φ α → α) → μ(φ) → α =
  Λφ:* → *.Λα.λF:Functor φ.
    λalgebra:φ α → α.
      μfold:μ(φ) → α.λv:μ(φ).algebra (F.map[μ(φ)][α] fold v) in

# Option type
let type Opt = λα.[None: (), Some: α] in

# List type
let type ListF = λα.λτ.Opt (α, τ) in
let type List = λα.μ(ListF α) in
let ListF = Λτ.{
  map = Λα.Λβ.λf:α → β.case {
      None = λ().[None = ()],
      Some = λ(x:τ, xs:α).[Some = (x, f xs)]
    }
} in

let List =
  let one = Λα.λx:α.[Some = (x, [None = ()])] in
  let μhas:∀α.(α → bool) → List α → bool = Λα.λp:α → bool.case {
      None = λ().false,
      Some = λ(x:α, xs:List α).p x ∨ has[α] p xs
    } in
  let fold = Λρ.Λα.λrxr:ρ → α → ρ.λr:ρ.
    fold[ListF α][ρ] (ListF[α]) ◁ case {
        None = λ().r,
        Some = λ(x:α, r:ρ).rxr r x
      } in
  let rev_to = Λα.fold[List α][α] (λxs:List α.λx:α.[Some = (x, xs)]) in
  let rev = Λα.rev_to[α] [None = ()] in
  let filter = Λα.λp:α → bool.λxs:List α.
    xs
    ▷ fold[List α][α] (λxs:List α.λx:α.if p x then [Some = (x, xs)] else xs) [None = ()]
    ▷ rev[α] in
  let concat = Λα.λxs:List α.λys:List α.rev[α] xs ▷ rev_to[α] ys in
  {one, has, fold, rev, filter, concat} in

# Set ADT
let type Set = λelem.λset.{
  empty: set,
  singleton: elem → set,
  remove: elem → set → set,
  union: set → set → set,
  to_list: set → List elem
} in

# Naïve Set implementation
let Set = {
  make = Λelem.λeq:elem → elem → bool.
    let type set = List elem in
    let empty = [None = ()] in
    let singleton = List.one[elem] in
    let remove = λx:elem.List.filter[elem] (λy:elem.¬eq x y) in
    let union = λl:set.λr:set.
      List.concat[elem] l (List.filter[elem] (λi:elem.¬List.has[elem] (eq i) l) r) in
    let to_list = λs:set.s in
    《set\{empty, singleton, remove, union, to_list}》: ∃(Set elem)
} in

# Term type
let type TermBase = λρ.λσ.λτ.[
  Lit: {val: int},
  Var: {id: ρ},
  Abs: {var: string, exp: σ},
  App: {fn: τ, arg: σ}
] in
let type TermF = λτ.TermBase string τ τ in
let type Term = μ(TermF) in
let type EvalCtx = TermBase string Term in
let type VarTerm = λτ.TermBase τ Term Term in

let TermF = {
  map = Λα.Λβ.λab:α → β.case {
    Lit = λ{val:int}.[Lit = {val}],
    Var = λ{id:string}.[Var = {id}],
    Abs = λ{var:string, exp:α}.[Abs = {var, exp = ab exp}],
    App = λ{fn:α, arg:α}.[App = {fn = ab fn, arg = ab arg}]
  }
} in

# Set of strings
let《ids\Ids》= Set.make[string] (=[string]) in

# Compute free variables using `fold`
let fv =
  fold[TermF][ids] TermF ◁ case {
    Lit = λ{val=_:int}.Ids.empty,
    Var = λ{id:string}.Ids.singleton id,
    Abs = λ{var:string, exp:ids}.Ids.remove var exp,
    App = λ{fn:ids, arg:ids}.Ids.union fn arg
  } in

# Using `fv`
[
  App = {
    fn = [
      Abs = {
        var = "x",
        exp = [App = {fn = [Var = {id = "F"}], arg = [Var = {id = "x"}]}]
      }
    ],
    arg = [Var = {id = "y"}]
  }
]
▷ fv
▷ Ids.to_list
