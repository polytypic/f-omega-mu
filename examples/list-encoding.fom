# Recursive `list` type encoding and `fold` function

type μlist = λt.∀r.{nil: r, cons: t → list t → r} → r

let nil: ∀(list) = λc.c.nil
let cons: ∀t.t → list t → list t =
  λhd.λtl.λc.c.cons hd tl

let μfold: ∀t.∀r.(t → r → r) → r → list t → r =
  λfn.λz.λxs.
    xs {nil = z, cons = λx.λxs.fold fn ◇ fn x z ◇ xs}

let pi_digits = cons 3 ◁ cons 1 ◁ cons 4 ◁ cons 1 ◁ nil«int»

fold (+) 0 pi_digits
