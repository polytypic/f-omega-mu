# Recursive `list` type encoding and `fold` function

type μlist = λt.∀r.{nil: r, cons: t → list t → r} → r

let nil: ∀(list) = Λ_.Λ_.λc.c.nil
let cons: ∀t.t → list t → list t =
  Λ_.λhd.λtl.Λ_.λc.c.cons hd tl

let μfold: ∀t.∀r.(t → r → r) → r → list t → r =
  Λt.Λr.λfn.λz.λxs.
    xs[r] {nil = z, cons = λx.λxs.fold[t][r] fn ◇ fn x z ◇ xs}

let pi_digits = cons[int] 3 ◁ cons[int] 1 ◁ cons[int] 4 ◁ cons[int] 1 ◁ nil[int]

fold[int][int] (+) 0 pi_digits
