# List using a recursive sum type

let type opt = λα.[none: (), some: α] in

let type μlist = λα.opt (α, list α) in

let infiniteOf = Λα.λx:α.μxs:μω.[some: (α, ω)].[some = (x, xs)] in

let μtakeN:∀α.int → list α → list α =
  Λα.λn:int.λxs:list α.
    if n ≤ 0 then
      [none = ()]
    else
      xs ▷ case {
        none = λ().[none = ()],
        some = λ(x:α, xs:list α).[some = (x, takeN[α] (n-1) xs)]
      } in

takeN[string] 5 (infiniteOf[string] "Fωμ")
