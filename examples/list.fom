# List using a recursive sum type

type opt = λα.'None | 'Some α in

type μlist = λα.opt (α, list α) in

let infiniteOf = Λα.λx:α.μxs:μω.'Some (α, ω).'Some (x, xs) in

let μtakeN:∀α.int → list α → list α =
  Λα.λn:int.λxs:list α.
    if n ≤ 0 then
      'None
    else
      xs ▷ case {
        None = λ().'None,
        Some = λ(x:α, xs:list α).'Some (x, takeN[α] (n-1) xs)
      } in

takeN[string] 5 (infiniteOf[string] "Fωμ")
