include "types"

let Opt = import "opt"

let of = Λα.λx: α.'Some (x, 'None)

let μhas: ∀α.(α → bool) → list α → bool = Λα.λp: α → bool.case {
  None = λ().false
  Some = λ(x: α, xs: list α).p x ∨ has[α] p xs
}

let μfold: ∀ρ.∀α.(ρ → α → ρ) → ρ → list α → ρ =
  Λρ.Λα.λrxr: ρ → α → ρ.λr: ρ.case {
    None = λ().r
    Some = λ(x: α, xs: list α).fold[ρ][α] rxr (rxr r x) xs
  }

let rev_to = Λα.fold[list α][α] λxs: list α.λx: α.'Some (x, xs)

let rev = Λα.rev_to[α] 'None

let map = Λα.Λβ.λxy: α → β.λxs: list α.
  xs
  ▷ fold[list β][α] (λys: list β.λx: α.'Some (xy x, ys)) 'None
  ▷ rev[β]

let chain = Λα.Λβ.λxys:α → list β.λxs: list α.
  xs
  ▷ fold[list β][α] (λys: list β.λx: α.rev_to[β] ys ◇ xys x) 'None
  ▷ rev[β]

let filter = Λα.λp: α → bool.λxs: list α.
  xs
  ▷ fold[list α][α]
      λxs: list α.λx: α.if p x then 'Some (x, xs) else xs
      'None
  ▷ rev[α]

let reject = Λα.λp: α → bool.filter[α] λx: α.¬p x

let concat = Λα.λxs: list α.λys: list α.rev[α] xs ▷ rev_to[α] ys

let infinite_of = Λα.λx: α.μxs: list_of_inf α.'Some (x, xs)

let head = Λα.Opt.map[(α, list α)][α] λ(x: α, _: list α).x

let take_n = Λα.λn: int.λxs: list α.
  let μtake_n: list α → int → list α → list α =
    λys: list α.λn: int.λxs: list α.
      if n ≤ 0 then
        ys
      else
        xs ▷ case {
          None = λ().ys
          Some = λ(x: α, xs: list α).take_n ('Some (x, ys)) (n - 1) xs
        }
  take_n 'None n xs ▷ rev[α]

let μdrop_n: ∀α.int → list α → list α = Λα.λn: int.λxs: list α.
  if n ≤ 0 then
    xs
  else
    xs ▷ case {
      None = λ().'None
      Some = λ(_: α, xs: list α).drop_n[α] (n-1) xs
    }

let nth = Λα.λn: int.λxs: list α.drop_n[α] n xs ▷ head[α]

let iota =
  let μiota: list int → int → list int = λxs: list int.λn: int.
    if 0 < n then let n = n - 1 in iota ('Some (n, xs)) n else xs
  iota 'None

{of, map, chain, has, fold, rev_to, rev, filter, reject, concat, infinite_of,
 head, take_n, drop_n, nth, iota}
