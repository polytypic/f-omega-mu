include "types" in
include "univ" in

let new_id =
  let《ref\{ref, get, set}》= import "ref" in
  let counter = ref[int] 0 in
  λ().
    let id = get[int] counter in
    let _ = set[int] counter (id + 1) in
    id in

let unsafe_cast = target[∀α.α → nothing] "x => x" in

let type univ = {id: int, value: nothing} in

let new = Λα.λ().
  let id = new_id () in
  let to = λx:α.{id, value = unsafe_cast[α] x} in
  let of = λx:univ.
    if x.id =[int] id then
      [some = x.value[α]]
    else
      [none = ()] in
  {to, of} in

《univ\{new}》: ∃(Univ)
