# HOAS GADT using Scott encoding

type μExpr = λα.∀ρ.Cases ρ → ρ α

and μCases = λρ.{
  Val: ∀α.                                  α → ρ α
  Bin: ∀α.∀β.∀γ.(α → β → γ) → Expr α → Expr β → ρ γ
  If:  ∀α.        Expr bool → Expr α → Expr α → ρ α
  App: ∀α.∀β.           Expr (α → β) → Expr α → ρ β
  Lam: ∀α.∀β.               (Expr α → Expr β) → ρ (α → β)
  Fix: ∀α.∀β.          Expr ((α → β) → α → β) → ρ (α → β)
}

let {Val, Bin, If, App, Lam, Fix}: Cases Expr = {
  Val = Λα.λx.Λ_.λcs.cs.Val[α] x
  Bin = Λα.Λβ.Λγ.λf.λx.λy.Λ_.λcs.cs.Bin[α][β][γ] f x y
  If  = Λα.λc.λt.λe.Λ_.λcs.cs.If[α] c t e
  App = Λα.Λβ.λf.λx.Λ_.λcs.cs.App[α][β] f x
  Lam = Λα.Λβ.λf.Λ_.λcs.cs.Lam[α][β] f
  Fix = Λα.Λβ.λf.Λ_.λcs.cs.Fix[α][β] f
}

let match = Λρ.λcs: Cases ρ.Λα.λe: Expr α.e[ρ] cs

let μeval: ∀α.Expr α → α = match[λα.α] {
  Val = Λ_.λx.x
  Bin = Λα.Λβ.Λ_.λxyz.λx.λy.xyz ◇ eval[α] x ◇ eval[β] y
  If  = Λα.λc.λt.λe.eval[α] if eval[bool] c then t else e
  App = Λα.Λβ.λxy.λx.eval[α → β] xy ◁ eval[α] x
  Lam = Λα.Λβ.λf.λx.eval[β] ◁ f ◁ Val[α] x
  Fix = Λα.Λβ.λf.let f = eval[(α → β) → α → β] f in μg.λx.f g x
}

let Fact =
  Fix[int][int]
  ◁ Lam[int → int][int → int] λf.Lam[int][int] λx.
      If[int] (Bin[int][int][bool] (=[int]) x ◁ Val[int] 0)
        (Val[int] 1)
        (Bin[int][int][int] (*)
          x
          ◁ App[int][int] f
            ◁ Bin[int][int][int] (-) x ◇ Val[int] 1)

eval[int] ◁ App[int][int] Fact ◁ Val[int] 5
