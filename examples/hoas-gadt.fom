# HOAS GADT using Scott encoding

type μExpr = λα.∀ρ.Cases ρ → ρ α

and μCases = λρ.{
  Val: ∀α.                                  α → ρ α
  Bin: ∀α.∀β.∀γ.(α → β → γ) → Expr α → Expr β → ρ γ
  If:  ∀α.        Expr bool → Expr α → Expr α → ρ α
  App: ∀α.∀β.           Expr (α → β) → Expr α → ρ β
  Lam: ∀α.∀β.               (Expr α → Expr β) → ρ (α → β)
  Fix: ∀α.∀β.          Expr ((α → β) → α → β) → ρ (α → β)
}

let {Val, Bin, If, App, Lam, Fix}: Cases Expr = {
  Val = λx.λcs.cs.Val x
  Bin = λf.λx.λy.λcs.cs.Bin f x y
  If  = λc.λt.λe.λcs.cs.If c t e
  App = λf.λx.λcs.cs.App f x
  Lam = λf.λcs.cs.Lam f
  Fix = λf.λcs.cs.Fix f
}

let match = Λρ.λcs: Cases ρ.Λα.λe: Expr α.e«ρ» cs

let μeval: ∀α.Expr α → α = match«λα.α» {
  Val = λx.x
  Bin = λxyz.λx.λy.xyz eval(x) eval(y)
  If  = λc.λt.λe.eval if eval c then t else e
  App = λxy.λx.eval xy eval(x)
  Lam = λf.λx.eval f(Val(x))
  Fix = λf.let f = eval f in μg.λx.f g x
}

let Fact =
  Fix
  ◁ Lam«int → int»«int → int» λf.Lam λx.
      If (Bin (=«int») x Val(0))
        Val(1)
        (Bin (*)
          x
          ◁ App f
            ◁ Bin (-) x Val(1))

eval ◁ App Fact Val(5)
