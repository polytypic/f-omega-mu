# GADT type encoding using type equality witnesses

include "lib/types"

let《eq\Eq》= import "lib/leibniz"

type μType = λτ.
  | 'Bool (Bool τ)
  | 'Int (Int τ)
  | 'String (String τ)
  | 'Alt ∃α.∃β.Alt τ α β
  | 'Pair ∃α.∃β.Pair τ α β
  | 'Iso ∃α.∃β.Iso τ α β
and μBool = λτ.eq bool τ
and μInt = λτ.eq int τ
and μString = λτ.eq string τ
and μAlt = λτ.λα.λβ.(eq (alt α β) τ, Type α, Type β)
and μPair = λτ.λα.λβ.(eq (α, β) τ, Type α, Type β)
and μIso = λτ.λα.λβ.(eq α τ, iso α β, Type β)

let bool = 'Bool (Eq.refl[bool])
let int = 'Int (Eq.refl[int])
let string = 'String (Eq.refl[string])
let alt = Λa.Λb.λa:Type a.λb:Type b.
  'Alt《a\《b\(Eq.refl[alt a b], a, b)》: ∃(Alt (alt a b) a)》: ∃α.∃β.Alt (alt a b) α β
let pair = Λa.Λb.λa:Type a.λb:Type b.
  'Pair《a\《b\(Eq.refl[(a, b)], a, b)》: ∃(Pair (a, b) a)》: ∃α.∃β.Pair (a, b) α β
let iso = Λa.Λb.λaIb:iso a b.λb:Type b.
  'Iso《a\《b\(Eq.refl[a], aIb, b)》: ∃(Iso a a)》: ∃α.∃β.Iso a α β

let String = import "lib/string"
let Int = import "lib/int"
let Bool = import "lib/bool"

let μto_string:∀τ.Type τ → τ → string = Λτ.case {
  Bool = λeq:Bool τ.λx:τ.
    Bool.to_string ◁ Eq.from[bool][τ] eq x
  Int = λeq:Int τ.λx:τ.
    Int.to_string ◁ Eq.from[int][τ] eq x
  String = λeq:String τ.λx:τ.
    String.to_literal (Eq.from[string][τ] eq x)
  Alt = λ《a\《b\(eq, ta, tb)》》: ∃α.∃β.Alt τ α β.
    let to_string_a = to_string[a] ta
    let to_string_b = to_string[b] tb
    λt:τ.Eq.from[alt a b][τ] eq t ▷ case {
      In1 = λa:a."('In1 " ^ to_string_a a ^ ")"
      In2 = λb:b."('In2 " ^ to_string_b b ^ ")"
    }
  Pair = λ《a\《b\(eq, ta, tb)》》: ∃α.∃β.Pair τ α β.
    let to_string_a = to_string[a] ta
    let to_string_b = to_string[b] tb
    λt:τ.
      let (a, b) = Eq.from[(a, b)][τ] eq t
      "(" ^ to_string_a a ^ ", " ^ to_string_b b ^ ")"
  Iso = λ《a\《b\(eq, (a2b, _), tb)》》: ∃α.∃β.Iso τ α β.
    let to_string_b = to_string[b] tb
    λt:τ.to_string_b ◁ a2b ◁ Eq.from[a][τ] eq t
}

to_string[(bool, alt string int)]
  (pair[bool][alt string int] bool (alt[string][int] string int))
  (false, 'In1 "foo")
