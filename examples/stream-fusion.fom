# Stream fusion

# Based on the paper
#
#   Stream fusion: From Lists to Streams to Nothing at All
#   Duncan Coutts, Roman Leschinskiy, Don Stewart
#   http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.104.7401

let type opt = λα.[none: (), some: α] in

# Basic recursive list type
let type μlist:* → * = λα.opt (α, list α) in

let List =
  let infinite_of = Λα.λx:α.μxs:list α.[some = (x, xs)] in
  let μtake_n:∀α.int → list α → list α = Λα.λn:int.λxs:list α.
    if n ≤ 0 then
      [none = ()]
    else
      xs ▷ case {
        none = λ().[none = ()],
        some = λ(x:α, xs:list α).[some = (x, take_n[α] (n-1) xs)]
      } in
  let iota = λn:int.
    let μloop:int → list int = λi:int.
      if i < n then [some = (i, loop (i + 1))] else [none = ()] in
    loop 0
  in
  {infinite_of, take_n, iota} in

# Non recursive existential stream type
let《stream\Stream》=
  let type step = λα.λs.[done: (), yield: (α, s), skip: s] in
  let type stream = λα.∃s.(s, s → step α s) in
  let of_list = Λα.λxs:list α.《list α\(
    xs,
    case {
      none = λ().[done = ()],
      some = λc:(α, list α).[yield = c]
    }
  )》: stream α in
  let to_list = Λα.λ《s\(xs, next)》:stream α.
    let to_list = μto_list:s → list α.λxs:s.
      next xs ▷ case {
        done = λ().[none = ()],
        yield = λ(hd: α, tl: s).[some = (hd, to_list tl)],
        skip = to_list
      } in
    to_list xs in
  let map = Λα.Λβ.λfn:α → β.λ《s\(xs, next)》:stream α.《s\(
      xs,
      λxs:s.
        next xs ▷ case {
          done = λ().[done = ()],
          yield = λ(hd: α, tl: s).[yield = (fn hd, tl)],
          skip = λskip:s.[skip]
        }
    )》: stream β in
  let filter = Λα.λp:α → bool.λ《s\(xs, next)》:stream α.《s\(
      xs,
      λxs:s.
        next xs ▷ case {
          done = λ().[done = ()],
          yield = λ(hd: α, tl: s).
            if p hd then [yield = (hd, tl)] else [skip = tl],
          skip = λskip:s.[skip]
        }
    )》: stream α in
  let append = Λα.λ《s1\(xs1, next1)》:stream α.λ《s2\(xs2, next2)》:stream α.
    let type s = [S1: s1, S2: s2] in《s\(
      [S1 = xs1],
      case {
        S1 = λs1:s1.next1 s1 ▷ case {
          done = λ().[skip = [S2 = xs2]],
          yield = λ(hd: α, tl: s1).[yield = (hd, [S1 = tl])],
          skip = λs1:s1.[skip = [S1 = s1]]
        },
        S2 = λs2:s2.next2 s2 ▷ case {
          done = λ().[done = ()],
          yield = λ(hd: α, tl: s2).[yield = (hd, [S2 = tl])],
          skip = λs2:s2.[skip = [S2 = s2]]
        }
      }
    )》: stream α in
  《stream\{of_list, to_list, map, filter, append}》: ∃stream:* → *.{
    of_list: ∀α.list α → stream α,
    to_list: ∀α.stream α → list α,
    map: ∀α.∀β.(α → β) → stream α → stream β,
    filter: ∀α.(α → bool) → stream α → stream α,
    append: ∀α.stream α → stream α → stream α
  } in

# Example usage
let xs = List.iota 5 in
Stream.append[int] (Stream.of_list[int] xs) (Stream.of_list[int] xs)
▷ Stream.map[int][int] (λx:int.x + 1)
▷ Stream.filter[int] (λx:int.x % 2 =[int] 1)
▷ Stream.map[int][int] (λx:int.x * 2)
▷ Stream.to_list[int]
