# First-class type equality witnesses

type Leibniz = λα.λβ.∀φ.φ α → φ β
type Fold = λα.λβ.∀φ.(∀γ.φ γ γ) → φ α β

type Eq = λeq.{
  ofFold: ∀α.∀β.Fold α β → eq α β
  ofLeibniz: ∀α.∀β.Leibniz α β → eq α β
  refl: ∀α.eq α α
  symm: ∀α.∀β.eq α β → eq β α
  trans: ∀α.∀β.∀γ.eq β γ → eq α β → eq α γ
  to: ∀α.∀β.eq α β → α → β
  from: ∀α.∀β.eq α β → β → α
}

let Leibniz: Eq Leibniz = {
  ofFold = λab.Λφ.ab«λα.λβ.φ α → φ β» λx.x
  ofLeibniz = λab.ab
  refl = λx.x
  symm = Λα.λab.Λφ.ab«λβ.φ β → φ α» λx.x
  trans = λbc.λab.Λφ.λx.bc«φ» ab«φ»(x)
  to = λab.ab«λx.x»
  from = Λα.λab.ab«λβ.β → α» λx.x
}

let Fold: Eq Fold = {
  ofFold = λab.ab
  ofLeibniz = Λα.λab.Λφ.λh.ab«φ α» h«α»
  refl = Λα.λf.f«α»
  symm = λab.Λφ.λf.ab«λα.λβ.φ β α» f
  trans = Λα.λbc.λab.Λϕ.λf.bc«λγ.λδ.ϕ α γ → ϕ α δ» (λx.x) ab«ϕ»(f)
  to = λab.ab«λα.λβ.α → β» λx.x
  from = λab.ab«λα.λβ.β → α» λx.x
}

{Leibniz, Fold}
